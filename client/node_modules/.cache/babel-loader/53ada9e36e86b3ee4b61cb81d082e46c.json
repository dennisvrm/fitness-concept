{"ast":null,"code":"// Action types\nexport const FRIENDS_REQUEST = 'FRIENDS_REQUEST',\n      FRIENDS_REQUEST_ERROR = 'FRIENDS_REQUEST_ERROR',\n      FRIENDS_REQUEST_SUCCESS = 'FRIENDS_REQUEST_SUCCESS',\n      RECOMMENDED_FRIENDS_REQUEST = 'RECOMMENDED_FRIENDS_REQUEST',\n      RECOMMENDED_FRIENDS_REQUEST_ERROR = 'RECOMMENDED_FRIENDS_REQUEST_ERROR',\n      RECOMMENDED_FRIENDS_REQUEST_SUCCESS = 'RECOMMENDED_FRIENDS_REQUEST_SUCCESS',\n      ADD_FRIEND_REQUEST = 'ADD_FRIEND_REQUEST',\n      ADD_FRIEND_REQUEST_ERROR = 'ADD_FRIEND_REQUEST_ERROR',\n      ADD_FRIEND_REQUEST_SUCCESS = 'ADD_FRIEND_REQUEST_SUCCESS'; // Action creators\n\nexport const friendsRequest = () => ({\n  type: AUTHENTICATION_REQUEST\n});\nexport const friendsRequestError = error => ({\n  type: AUTHENTICATION_REQUEST_ERROR,\n  error\n});\nexport const friendsRequestSuccess = friends => ({\n  type: AUTHENTICATION_REQUEST_SUCCESS,\n  friends\n});\nexport const recommendedFriendsRequest = () => ({\n  type: RECOMMENDED_FRIENDS_REQUEST\n});\nexport const recommendedFriendsRequestError = error => ({\n  type: RECOMMENDED_FRIENDS_REQUEST_ERROR,\n  error\n});\nexport const recommendedFriendsRequestSuccess = recommendedFriends => ({\n  type: RECOMMENDED_FRIENDS_REQUEST_SUCCESS,\n  recommendedFriends\n});\nexport const addFriendRequest = () => ({\n  type: RECOMMENDED_FRIENDS_REQUEST\n});\nexport const addFriendRequestError = error => ({\n  type: RECOMMENDED_FRIENDS_REQUEST_ERROR,\n  error\n});\nexport const addFriendRequestSuccess = friend => ({\n  type: RECOMMENDED_FRIENDS_REQUEST_SUCCESS,\n  friend\n});\nexport const retrieveFriends = () => async (dispatch, getState) => {\n  dispatch(friendsRequest());\n  const state = getState();\n\n  try {\n    const response = await fetch(`http://localhost:4000/api/${state.authentication.userId}/friends`, {\n      method: 'GET',\n      headers: {\n        Accept: 'application/json'\n      },\n      credentials: 'include',\n      mode: 'cors'\n    });\n    responseJson = await response.json();\n    if (response.status !== 200) throw new Error();\n    return dispatch(friendsRequestSuccess(responseJson));\n  } catch (e) {\n    console.error(e);\n    return dispatch(friendsRequestError('Retrieve friends error'));\n  }\n};\nexport const retrieveRecommendedFriends = () => async (dispatch, getState) => {\n  dispatch(recommendedFriendsRequest());\n  const state = getState();\n\n  try {\n    const response = await fetch(`http://localhost:4000/api/${state.authentication.userId}/recommended-friends`, {\n      method: 'GET',\n      headers: {\n        Accept: 'application/json'\n      },\n      credentials: 'include',\n      mode: 'cors'\n    });\n    responseJson = await response.json();\n    if (response.status !== 200) throw new Error();\n    return dispatch(recommendedFriendsRequestSuccess(responseJson));\n  } catch (e) {\n    console.error(e);\n    return dispatch(recommendedFriendsRequestError('Retrieve recommended friends error'));\n  }\n};\nexport const addFriend = friend => async (dispatch, getState) => {\n  dispatch(addFriendRequest());\n  const state = getState();\n\n  try {\n    const response = await fetch(`http://localhost:4000/api/${state.authentication.userId}/friends`, {\n      method: 'PUT',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      },\n      credentials: 'include',\n      mode: 'cors',\n      body: JSON.stringify({\n        friend\n      })\n    });\n    responseJson = await response.json();\n    if (response.status !== 200) throw new Error();\n    return dispatch(addFriendRequestSuccess(responseJson));\n  } catch (e) {\n    console.error(e);\n    return dispatch(addFriendRequestError('Add friend error'));\n  }\n};","map":{"version":3,"sources":["/Users/dennisvreman/Documents/han/dwa/project-dwa/concepts/fitness/client/src/actions/friends.js"],"names":["FRIENDS_REQUEST","FRIENDS_REQUEST_ERROR","FRIENDS_REQUEST_SUCCESS","RECOMMENDED_FRIENDS_REQUEST","RECOMMENDED_FRIENDS_REQUEST_ERROR","RECOMMENDED_FRIENDS_REQUEST_SUCCESS","ADD_FRIEND_REQUEST","ADD_FRIEND_REQUEST_ERROR","ADD_FRIEND_REQUEST_SUCCESS","friendsRequest","type","AUTHENTICATION_REQUEST","friendsRequestError","error","AUTHENTICATION_REQUEST_ERROR","friendsRequestSuccess","friends","AUTHENTICATION_REQUEST_SUCCESS","recommendedFriendsRequest","recommendedFriendsRequestError","recommendedFriendsRequestSuccess","recommendedFriends","addFriendRequest","addFriendRequestError","addFriendRequestSuccess","friend","retrieveFriends","dispatch","getState","state","response","fetch","authentication","userId","method","headers","Accept","credentials","mode","responseJson","json","status","Error","e","console","retrieveRecommendedFriends","addFriend","body","JSON","stringify"],"mappings":"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","sourcesContent":["// Action types\nexport const FRIENDS_REQUEST = 'FRIENDS_REQUEST',\n  FRIENDS_REQUEST_ERROR = 'FRIENDS_REQUEST_ERROR',\n  FRIENDS_REQUEST_SUCCESS = 'FRIENDS_REQUEST_SUCCESS',\n  RECOMMENDED_FRIENDS_REQUEST = 'RECOMMENDED_FRIENDS_REQUEST',\n  RECOMMENDED_FRIENDS_REQUEST_ERROR = 'RECOMMENDED_FRIENDS_REQUEST_ERROR',\n  RECOMMENDED_FRIENDS_REQUEST_SUCCESS = 'RECOMMENDED_FRIENDS_REQUEST_SUCCESS',\n  ADD_FRIEND_REQUEST = 'ADD_FRIEND_REQUEST',\n  ADD_FRIEND_REQUEST_ERROR = 'ADD_FRIEND_REQUEST_ERROR',\n  ADD_FRIEND_REQUEST_SUCCESS = 'ADD_FRIEND_REQUEST_SUCCESS';\n\n// Action creators\nexport const friendsRequest = () => ({\n  type: AUTHENTICATION_REQUEST,\n});\nexport const friendsRequestError = (error) => ({\n  type: AUTHENTICATION_REQUEST_ERROR,\n  error,\n});\nexport const friendsRequestSuccess = (friends) => ({\n  type: AUTHENTICATION_REQUEST_SUCCESS,\n  friends,\n});\n\nexport const recommendedFriendsRequest = () => ({\n  type: RECOMMENDED_FRIENDS_REQUEST,\n});\nexport const recommendedFriendsRequestError = (error) => ({\n  type: RECOMMENDED_FRIENDS_REQUEST_ERROR,\n  error,\n});\nexport const recommendedFriendsRequestSuccess = (recommendedFriends) => ({\n  type: RECOMMENDED_FRIENDS_REQUEST_SUCCESS,\n  recommendedFriends,\n});\n\nexport const addFriendRequest = () => ({\n  type: RECOMMENDED_FRIENDS_REQUEST,\n});\nexport const addFriendRequestError = (error) => ({\n  type: RECOMMENDED_FRIENDS_REQUEST_ERROR,\n  error,\n});\nexport const addFriendRequestSuccess = (friend) => ({\n  type: RECOMMENDED_FRIENDS_REQUEST_SUCCESS,\n  friend,\n});\n\nexport const retrieveFriends = () => async (dispatch, getState) => {\n  dispatch(friendsRequest());\n\n  const state = getState();\n\n  try {\n    const response = await fetch(\n      `http://localhost:4000/api/${state.authentication.userId}/friends`,\n      {\n        method: 'GET',\n        headers: {\n          Accept: 'application/json',\n        },\n        credentials: 'include',\n        mode: 'cors',\n      }\n    );\n    responseJson = await response.json();\n\n    if (response.status !== 200) throw new Error();\n\n    return dispatch(friendsRequestSuccess(responseJson));\n  } catch (e) {\n    console.error(e);\n    return dispatch(friendsRequestError('Retrieve friends error'));\n  }\n};\n\nexport const retrieveRecommendedFriends = () => async (dispatch, getState) => {\n  dispatch(recommendedFriendsRequest());\n\n  const state = getState();\n\n  try {\n    const response = await fetch(\n      `http://localhost:4000/api/${state.authentication.userId}/recommended-friends`,\n      {\n        method: 'GET',\n        headers: {\n          Accept: 'application/json',\n        },\n        credentials: 'include',\n        mode: 'cors',\n      }\n    );\n    responseJson = await response.json();\n\n    if (response.status !== 200) throw new Error();\n\n    return dispatch(recommendedFriendsRequestSuccess(responseJson));\n  } catch (e) {\n    console.error(e);\n    return dispatch(\n      recommendedFriendsRequestError('Retrieve recommended friends error')\n    );\n  }\n};\n\nexport const addFriend = (friend) => async (dispatch, getState) => {\n  dispatch(addFriendRequest());\n\n  const state = getState();\n\n  try {\n    const response = await fetch(\n      `http://localhost:4000/api/${state.authentication.userId}/friends`,\n      {\n        method: 'PUT',\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json',\n        },\n        credentials: 'include',\n        mode: 'cors',\n        body: JSON.stringify({\n          friend,\n        }),\n      }\n    );\n    responseJson = await response.json();\n\n    if (response.status !== 200) throw new Error();\n\n    return dispatch(addFriendRequestSuccess(responseJson));\n  } catch (e) {\n    console.error(e);\n    return dispatch(addFriendRequestError('Add friend error'));\n  }\n};\n"]},"metadata":{},"sourceType":"module"}