{"ast":null,"code":"// Action types\nexport const AUTHENTICATION_REQUEST = 'AUTHENTICATION_REQUEST',\n      AUTHENTICATION_REQUEST_ERROR = 'AUTHENTICATION_REQUEST_ERROR',\n      AUTHENTICATION_REQUEST_SUCCESS = 'AUTHENTICATION_REQUEST_SUCCESS',\n      EDIT_EMAIL = 'EDIT_EMAIL',\n      EDIT_PASSWORD = 'EDIT_PASSWORD',\n      SUBMIT_LOGIN_FORM = 'SUBMIT_LOGIN_FORM'; // Action creators\n\nexport const editEmail = email => ({\n  type: EDIT_EMAIL,\n  email\n});\nexport const editPassword = password => ({\n  type: EDIT_PASSWORD,\n  password\n});\nexport const submitLoginForm = () => ({\n  type: SUBMIT_LOGIN_FORM\n});\nexport const authenticationRequest = () => ({\n  type: AUTHENTICATION_REQUEST\n});\nexport const authenticationRequestError = error => ({\n  type: AUTHENTICATION_REQUEST_ERROR,\n  error\n});\nexport const authenticationRequestSuccess = (firstName, lastName, email, userId) => ({\n  type: AUTHENTICATION_REQUEST_SUCCESS,\n  firstName,\n  lastName,\n  email,\n  userId\n});\nexport const authenticate = () => async (dispatch, getState) => {\n  dispatch(submitLoginForm());\n  dispatch(authenticationRequest());\n  const state = getState();\n\n  try {\n    const response = await fetch(`http://localhost:4000/api/authentication`, {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      },\n      credentials: 'include',\n      mode: 'cors',\n      body: JSON.stringify({\n        email: state.authentication.email,\n        password: state.authentication.password\n      })\n    });\n    if (response.status !== 200) throw new Error(await response.text());\n    let responseJson = await response.json();\n    return dispatch(authenticationRequestSuccess(responseJson.firstName, responseJson.lastName, responseJson.email, responseJson.userId));\n  } catch (e) {\n    console.error(e);\n    return dispatch(authenticationRequestError(e.message));\n  }\n};","map":{"version":3,"sources":["/Users/dennisvreman/Documents/han/dwa/project-dwa/concepts/fitness/client/src/actions/authentication.js"],"names":["AUTHENTICATION_REQUEST","AUTHENTICATION_REQUEST_ERROR","AUTHENTICATION_REQUEST_SUCCESS","EDIT_EMAIL","EDIT_PASSWORD","SUBMIT_LOGIN_FORM","editEmail","email","type","editPassword","password","submitLoginForm","authenticationRequest","authenticationRequestError","error","authenticationRequestSuccess","firstName","lastName","userId","authenticate","dispatch","getState","state","response","fetch","method","headers","Accept","credentials","mode","body","JSON","stringify","authentication","status","Error","text","responseJson","json","e","console","message"],"mappings":"AAAA;AACA,OAAO,MAAMA,sBAAsB,GAAG,wBAA/B;AAAA,MACLC,4BAA4B,GAAG,8BAD1B;AAAA,MAELC,8BAA8B,GAAG,gCAF5B;AAAA,MAGLC,UAAU,GAAG,YAHR;AAAA,MAILC,aAAa,GAAG,eAJX;AAAA,MAKLC,iBAAiB,GAAG,mBALf,C,CAOP;;AACA,OAAO,MAAMC,SAAS,GAAIC,KAAD,KAAY;AACnCC,EAAAA,IAAI,EAAEL,UAD6B;AAEnCI,EAAAA;AAFmC,CAAZ,CAAlB;AAIP,OAAO,MAAME,YAAY,GAAIC,QAAD,KAAe;AACzCF,EAAAA,IAAI,EAAEJ,aADmC;AAEzCM,EAAAA;AAFyC,CAAf,CAArB;AAKP,OAAO,MAAMC,eAAe,GAAG,OAAO;AACpCH,EAAAA,IAAI,EAAEH;AAD8B,CAAP,CAAxB;AAIP,OAAO,MAAMO,qBAAqB,GAAG,OAAO;AAC1CJ,EAAAA,IAAI,EAAER;AADoC,CAAP,CAA9B;AAGP,OAAO,MAAMa,0BAA0B,GAAIC,KAAD,KAAY;AACpDN,EAAAA,IAAI,EAAEP,4BAD8C;AAEpDa,EAAAA;AAFoD,CAAZ,CAAnC;AAIP,OAAO,MAAMC,4BAA4B,GAAG,CAC1CC,SAD0C,EAE1CC,QAF0C,EAG1CV,KAH0C,EAI1CW,MAJ0C,MAKtC;AACJV,EAAAA,IAAI,EAAEN,8BADF;AAEJc,EAAAA,SAFI;AAGJC,EAAAA,QAHI;AAIJV,EAAAA,KAJI;AAKJW,EAAAA;AALI,CALsC,CAArC;AAaP,OAAO,MAAMC,YAAY,GAAG,MAAM,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AAC9DD,EAAAA,QAAQ,CAACT,eAAe,EAAhB,CAAR;AACAS,EAAAA,QAAQ,CAACR,qBAAqB,EAAtB,CAAR;AAEA,QAAMU,KAAK,GAAGD,QAAQ,EAAtB;;AAEA,MAAI;AACF,UAAME,QAAQ,GAAG,MAAMC,KAAK,CAAE,0CAAF,EAA6C;AACvEC,MAAAA,MAAM,EAAE,MAD+D;AAEvEC,MAAAA,OAAO,EAAE;AACPC,QAAAA,MAAM,EAAE,kBADD;AAEP,wBAAgB;AAFT,OAF8D;AAMvEC,MAAAA,WAAW,EAAE,SAN0D;AAOvEC,MAAAA,IAAI,EAAE,MAPiE;AAQvEC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBzB,QAAAA,KAAK,EAAEe,KAAK,CAACW,cAAN,CAAqB1B,KADT;AAEnBG,QAAAA,QAAQ,EAAEY,KAAK,CAACW,cAAN,CAAqBvB;AAFZ,OAAf;AARiE,KAA7C,CAA5B;AAcA,QAAIa,QAAQ,CAACW,MAAT,KAAoB,GAAxB,EAA6B,MAAM,IAAIC,KAAJ,CAAU,MAAMZ,QAAQ,CAACa,IAAT,EAAhB,CAAN;AAE7B,QAAIC,YAAY,GAAG,MAAMd,QAAQ,CAACe,IAAT,EAAzB;AAEA,WAAOlB,QAAQ,CACbL,4BAA4B,CAC1BsB,YAAY,CAACrB,SADa,EAE1BqB,YAAY,CAACpB,QAFa,EAG1BoB,YAAY,CAAC9B,KAHa,EAI1B8B,YAAY,CAACnB,MAJa,CADf,CAAf;AAQD,GA3BD,CA2BE,OAAOqB,CAAP,EAAU;AACVC,IAAAA,OAAO,CAAC1B,KAAR,CAAcyB,CAAd;AACA,WAAOnB,QAAQ,CAACP,0BAA0B,CAAC0B,CAAC,CAACE,OAAH,CAA3B,CAAf;AACD;AACF,CArCM","sourcesContent":["// Action types\nexport const AUTHENTICATION_REQUEST = 'AUTHENTICATION_REQUEST',\n  AUTHENTICATION_REQUEST_ERROR = 'AUTHENTICATION_REQUEST_ERROR',\n  AUTHENTICATION_REQUEST_SUCCESS = 'AUTHENTICATION_REQUEST_SUCCESS',\n  EDIT_EMAIL = 'EDIT_EMAIL',\n  EDIT_PASSWORD = 'EDIT_PASSWORD',\n  SUBMIT_LOGIN_FORM = 'SUBMIT_LOGIN_FORM';\n\n// Action creators\nexport const editEmail = (email) => ({\n  type: EDIT_EMAIL,\n  email,\n});\nexport const editPassword = (password) => ({\n  type: EDIT_PASSWORD,\n  password,\n});\n\nexport const submitLoginForm = () => ({\n  type: SUBMIT_LOGIN_FORM,\n});\n\nexport const authenticationRequest = () => ({\n  type: AUTHENTICATION_REQUEST,\n});\nexport const authenticationRequestError = (error) => ({\n  type: AUTHENTICATION_REQUEST_ERROR,\n  error,\n});\nexport const authenticationRequestSuccess = (\n  firstName,\n  lastName,\n  email,\n  userId\n) => ({\n  type: AUTHENTICATION_REQUEST_SUCCESS,\n  firstName,\n  lastName,\n  email,\n  userId,\n});\n\nexport const authenticate = () => async (dispatch, getState) => {\n  dispatch(submitLoginForm());\n  dispatch(authenticationRequest());\n\n  const state = getState();\n\n  try {\n    const response = await fetch(`http://localhost:4000/api/authentication`, {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n      },\n      credentials: 'include',\n      mode: 'cors',\n      body: JSON.stringify({\n        email: state.authentication.email,\n        password: state.authentication.password,\n      }),\n    });\n\n    if (response.status !== 200) throw new Error(await response.text());\n\n    let responseJson = await response.json();\n\n    return dispatch(\n      authenticationRequestSuccess(\n        responseJson.firstName,\n        responseJson.lastName,\n        responseJson.email,\n        responseJson.userId\n      )\n    );\n  } catch (e) {\n    console.error(e);\n    return dispatch(authenticationRequestError(e.message));\n  }\n};\n"]},"metadata":{},"sourceType":"module"}