{"ast":null,"code":"// Action types\nexport const AUTHENTICATION_REQUEST = 'AUTHENTICATION_REQUEST',\n      AUTHENTICATION_REQUEST_ERROR = 'AUTHENTICATION_REQUEST_ERROR',\n      AUTHENTICATION_REQUEST_SUCCESS = 'AUTHENTICATION_REQUEST_SUCCESS',\n      EDIT_EMAIL = 'EDIT_EMAIL',\n      EDIT_PASSWORD = 'EDIT_PASSWORD',\n      SUBMIT_LOGIN_FORM = 'SUBMIT_LOGIN_FORM'; // Action creators\n\nexport const editEmail = email => ({\n  type: EDIT_EMAIL,\n  email\n});\nexport const editPassword = password => ({\n  type: EDIT_PASSWORD,\n  password\n});\nexport const submitLoginForm = () => ({\n  type: SUBMIT_LOGIN_FORM\n});\nexport const authenticationRequest = () => ({\n  type: AUTHENTICATION_REQUEST\n});\nexport const authenticationRequestError = error => ({\n  type: AUTHENTICATION_REQUEST_ERROR,\n  error\n});\nexport const authenticationRequestSuccess = (firstName, lastName, email) => ({\n  type: AUTHENTICATION_REQUEST_SUCCESS,\n  firstName,\n  lastName,\n  email\n});\nexport const authenticate = () => async (dispatch, getState) => {\n  dispatch(submitLoginForm());\n  dispatch(authenticationRequest());\n  const state = getState();\n\n  try {\n    const response = await fetch(`http://localhost:4000/api/user`, {\n      method: 'GET',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      },\n      credentials: 'include',\n      mode: 'cors',\n      body: JSON.stringify({\n        email: state.authentication.email,\n        password: state.authentication.password\n      })\n    });\n    let responseJson = await response.json();\n    if (response.status !== 200) throw new Error();\n    return dispatch(authenticationRequestSuccess({\n      firstName: responseJson.firstName,\n      lastName: responseJson.lastName,\n      email: responseJson.email,\n      userId: responseJson.userId\n    }));\n  } catch (e) {\n    console.error(e);\n    return dispatch(authenticationRequestError('Auth error'));\n  }\n};","map":{"version":3,"sources":["/Users/dennisvreman/Documents/han/dwa/project-dwa/concepts/fitness/client/src/actions/authentication.js"],"names":["AUTHENTICATION_REQUEST","AUTHENTICATION_REQUEST_ERROR","AUTHENTICATION_REQUEST_SUCCESS","EDIT_EMAIL","EDIT_PASSWORD","SUBMIT_LOGIN_FORM","editEmail","email","type","editPassword","password","submitLoginForm","authenticationRequest","authenticationRequestError","error","authenticationRequestSuccess","firstName","lastName","authenticate","dispatch","getState","state","response","fetch","method","headers","Accept","credentials","mode","body","JSON","stringify","authentication","responseJson","json","status","Error","userId","e","console"],"mappings":"AAAA;AACA,OAAO,MAAMA,sBAAsB,GAAG,wBAA/B;AAAA,MACLC,4BAA4B,GAAG,8BAD1B;AAAA,MAELC,8BAA8B,GAAG,gCAF5B;AAAA,MAGLC,UAAU,GAAG,YAHR;AAAA,MAILC,aAAa,GAAG,eAJX;AAAA,MAKLC,iBAAiB,GAAG,mBALf,C,CAOP;;AACA,OAAO,MAAMC,SAAS,GAAIC,KAAD,KAAY;AACnCC,EAAAA,IAAI,EAAEL,UAD6B;AAEnCI,EAAAA;AAFmC,CAAZ,CAAlB;AAIP,OAAO,MAAME,YAAY,GAAIC,QAAD,KAAe;AACzCF,EAAAA,IAAI,EAAEJ,aADmC;AAEzCM,EAAAA;AAFyC,CAAf,CAArB;AAKP,OAAO,MAAMC,eAAe,GAAG,OAAO;AACpCH,EAAAA,IAAI,EAAEH;AAD8B,CAAP,CAAxB;AAIP,OAAO,MAAMO,qBAAqB,GAAG,OAAO;AAC1CJ,EAAAA,IAAI,EAAER;AADoC,CAAP,CAA9B;AAGP,OAAO,MAAMa,0BAA0B,GAAIC,KAAD,KAAY;AACpDN,EAAAA,IAAI,EAAEP,4BAD8C;AAEpDa,EAAAA;AAFoD,CAAZ,CAAnC;AAIP,OAAO,MAAMC,4BAA4B,GAAG,CAACC,SAAD,EAAYC,QAAZ,EAAsBV,KAAtB,MAAiC;AAC3EC,EAAAA,IAAI,EAAEN,8BADqE;AAE3Ec,EAAAA,SAF2E;AAG3EC,EAAAA,QAH2E;AAI3EV,EAAAA;AAJ2E,CAAjC,CAArC;AAOP,OAAO,MAAMW,YAAY,GAAG,MAAM,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AAC9DD,EAAAA,QAAQ,CAACR,eAAe,EAAhB,CAAR;AACAQ,EAAAA,QAAQ,CAACP,qBAAqB,EAAtB,CAAR;AAEA,QAAMS,KAAK,GAAGD,QAAQ,EAAtB;;AAEA,MAAI;AACF,UAAME,QAAQ,GAAG,MAAMC,KAAK,CAAE,gCAAF,EAAmC;AAC7DC,MAAAA,MAAM,EAAE,KADqD;AAE7DC,MAAAA,OAAO,EAAE;AACPC,QAAAA,MAAM,EAAE,kBADD;AAEP,wBAAgB;AAFT,OAFoD;AAM7DC,MAAAA,WAAW,EAAE,SANgD;AAO7DC,MAAAA,IAAI,EAAE,MAPuD;AAQ7DC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBxB,QAAAA,KAAK,EAAEc,KAAK,CAACW,cAAN,CAAqBzB,KADT;AAEnBG,QAAAA,QAAQ,EAAEW,KAAK,CAACW,cAAN,CAAqBtB;AAFZ,OAAf;AARuD,KAAnC,CAA5B;AAaA,QAAIuB,YAAY,GAAG,MAAMX,QAAQ,CAACY,IAAT,EAAzB;AAEA,QAAIZ,QAAQ,CAACa,MAAT,KAAoB,GAAxB,EAA6B,MAAM,IAAIC,KAAJ,EAAN;AAE7B,WAAOjB,QAAQ,CACbJ,4BAA4B,CAAC;AAC3BC,MAAAA,SAAS,EAAEiB,YAAY,CAACjB,SADG;AAE3BC,MAAAA,QAAQ,EAAEgB,YAAY,CAAChB,QAFI;AAG3BV,MAAAA,KAAK,EAAE0B,YAAY,CAAC1B,KAHO;AAI3B8B,MAAAA,MAAM,EAAEJ,YAAY,CAACI;AAJM,KAAD,CADf,CAAf;AAQD,GA1BD,CA0BE,OAAOC,CAAP,EAAU;AACVC,IAAAA,OAAO,CAACzB,KAAR,CAAcwB,CAAd;AACA,WAAOnB,QAAQ,CAACN,0BAA0B,CAAC,YAAD,CAA3B,CAAf;AACD;AACF,CApCM","sourcesContent":["// Action types\nexport const AUTHENTICATION_REQUEST = 'AUTHENTICATION_REQUEST',\n  AUTHENTICATION_REQUEST_ERROR = 'AUTHENTICATION_REQUEST_ERROR',\n  AUTHENTICATION_REQUEST_SUCCESS = 'AUTHENTICATION_REQUEST_SUCCESS',\n  EDIT_EMAIL = 'EDIT_EMAIL',\n  EDIT_PASSWORD = 'EDIT_PASSWORD',\n  SUBMIT_LOGIN_FORM = 'SUBMIT_LOGIN_FORM';\n\n// Action creators\nexport const editEmail = (email) => ({\n  type: EDIT_EMAIL,\n  email,\n});\nexport const editPassword = (password) => ({\n  type: EDIT_PASSWORD,\n  password,\n});\n\nexport const submitLoginForm = () => ({\n  type: SUBMIT_LOGIN_FORM,\n});\n\nexport const authenticationRequest = () => ({\n  type: AUTHENTICATION_REQUEST,\n});\nexport const authenticationRequestError = (error) => ({\n  type: AUTHENTICATION_REQUEST_ERROR,\n  error,\n});\nexport const authenticationRequestSuccess = (firstName, lastName, email) => ({\n  type: AUTHENTICATION_REQUEST_SUCCESS,\n  firstName,\n  lastName,\n  email,\n});\n\nexport const authenticate = () => async (dispatch, getState) => {\n  dispatch(submitLoginForm());\n  dispatch(authenticationRequest());\n\n  const state = getState();\n\n  try {\n    const response = await fetch(`http://localhost:4000/api/user`, {\n      method: 'GET',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n      },\n      credentials: 'include',\n      mode: 'cors',\n      body: JSON.stringify({\n        email: state.authentication.email,\n        password: state.authentication.password,\n      }),\n    });\n    let responseJson = await response.json();\n\n    if (response.status !== 200) throw new Error();\n\n    return dispatch(\n      authenticationRequestSuccess({\n        firstName: responseJson.firstName,\n        lastName: responseJson.lastName,\n        email: responseJson.email,\n        userId: responseJson.userId,\n      })\n    );\n  } catch (e) {\n    console.error(e);\n    return dispatch(authenticationRequestError('Auth error'));\n  }\n};\n"]},"metadata":{},"sourceType":"module"}